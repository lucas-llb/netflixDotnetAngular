{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/lucas/OneDrive/Documents/Github/netflixProjectFrontAngular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./register.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./register.component.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nlet RegisterComponent = class RegisterComponent {\n  router;\n  fb;\n  authService;\n  registerForm;\n  toastIsOpen = false;\n  toastMessage = '';\n  constructor(router, fb, authService) {\n    this.router = router;\n    this.fb = fb;\n    this.authService = authService;\n    this.registerForm = this.fb.group({\n      firstName: ['', [Validators.required, Validators.maxLength(20)]],\n      lastName: ['', [Validators.required, Validators.maxLength(20)]],\n      phone: ['', [Validators.required, Validators.maxLength(20)]],\n      email: ['', [Validators.required, Validators.email, Validators.maxLength(20)]],\n      birth: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(20)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(20)]]\n    });\n  }\n  ngOnInit() {\n    if (sessionStorage.getItem('netflix-token')) {\n      this.router.navigate(['/home']);\n    }\n  }\n  handleRegister() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.registerForm.invalid) {\n        return;\n      }\n      const {\n        password,\n        confirmPassword,\n        ...params\n      } = _this.registerForm.value;\n      if (password !== confirmPassword) {\n        _this.showToast('Passwords are different');\n        return;\n      }\n      _this.authService.register(params).subscribe({\n        next: () => {\n          _this.router.navigate(['/login'], {\n            queryParams: {\n              registered: true\n            }\n          });\n        },\n        error: err => {\n          _this.showToast(err.error.message);\n        }\n      });\n    })();\n  }\n  showToast(message) {\n    this.toastMessage = message;\n    this.toastIsOpen = true;\n    setTimeout(() => {\n      this.toastIsOpen = false;\n    }, 3000);\n  }\n  static ctorParameters = () => [{\n    type: Router\n  }, {\n    type: FormBuilder\n  }, {\n    type: AuthService\n  }];\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"names":["Component","Router","FormBuilder","Validators","AuthService","RegisterComponent","router","fb","authService","registerForm","toastIsOpen","toastMessage","constructor","group","firstName","required","maxLength","lastName","phone","email","birth","password","minLength","confirmPassword","ngOnInit","sessionStorage","getItem","navigate","handleRegister","_this","_asyncToGenerator","invalid","params","value","showToast","register","subscribe","next","queryParams","registered","error","err","message","setTimeout","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\lucas\\OneDrive\\Documents\\Github\\netflixProjectFrontAngular\\src\\app\\pages\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n  toastIsOpen: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private authService: AuthService\r\n  ) {\r\n    this.registerForm = this.fb.group({\r\n      firstName: ['', [Validators.required, Validators.maxLength(20)]],\r\n      lastName: ['', [Validators.required, Validators.maxLength(20)]],\r\n      phone: ['', [Validators.required, Validators.maxLength(20)]],\r\n      email: ['', [Validators.required, Validators.email, Validators.maxLength(20)]],\r\n      birth: ['', [Validators.required]],\r\n      password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(20)]],\r\n      confirmPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(20)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (sessionStorage.getItem('netflix-token')) {\r\n      this.router.navigate(['/home']);\r\n    }\r\n  }\r\n\r\n  async handleRegister(): Promise<void> {\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    const { password, confirmPassword, ...params } = this.registerForm.value;\r\n\r\n    if (password !== confirmPassword) {\r\n      this.showToast('Passwords are different');\r\n      return;\r\n    }\r\n\r\n    this.authService.register(params).subscribe({\r\n      next:() => {\r\n        this.router.navigate(['/login'], { queryParams: { registered: true } });\r\n      },\r\n      error: (err) => {\r\n        this.showToast(err.error.message);\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  private showToast(message: string): void {\r\n    this.toastMessage = message;\r\n    this.toastIsOpen = true;\r\n    setTimeout(() => {\r\n      this.toastIsOpen = false;\r\n    }, 3000);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}