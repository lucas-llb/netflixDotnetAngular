{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/lucas/OneDrive/Documents/Github/netflixProjectFrontAngular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./password.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./password.component.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { ProfileService } from '../../../services/profile.service';\nimport { ToastComponent } from '../../common/toast/toast.component';\nlet PasswordComponent = class PasswordComponent {\n  fb;\n  profileService;\n  passwordForm;\n  toastIsOpen = false;\n  errorMessage = '';\n  color = '';\n  constructor(fb, profileService) {\n    this.fb = fb;\n    this.profileService = profileService;\n    this.passwordForm = this.fb.group({\n      currentPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\n      newPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]]\n    });\n  }\n  ngOnInit() {\n    this.profileService.fetchCurrent().subscribe(password => {\n      this.passwordForm.patchValue({\n        currentPassword: password.currentPassword,\n        newPassword: password.newPassword\n      });\n    });\n  }\n  handlePasswordUpdate() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.passwordForm.invalid) {\n        return;\n      }\n      const {\n        currentPassword,\n        newPassword,\n        confirmPassword\n      } = _this.passwordForm.value;\n      if (newPassword !== confirmPassword) {\n        _this.showToast('Passwords are not equal', 'bg-danger');\n        return;\n      }\n      if (currentPassword === newPassword) {\n        _this.showToast('New password and current password are the same', 'bg-danger');\n        return;\n      }\n      _this.profileService.passwordUpdate({\n        currentPassword,\n        newPassword\n      }).subscribe({\n        next: () => {\n          _this.showToast('Password updated', 'bg-success');\n          _this.passwordForm.reset();\n          return;\n        },\n        error: () => {\n          _this.showToast('Password incorrect', 'bg-danger');\n        }\n      });\n    })();\n  }\n  showToast(message, color) {\n    this.toastIsOpen = true;\n    this.errorMessage = message;\n    this.color = color;\n    setTimeout(() => this.toastIsOpen = false, 3000);\n  }\n  static ctorParameters = () => [{\n    type: FormBuilder\n  }, {\n    type: ProfileService\n  }];\n};\nPasswordComponent = __decorate([Component({\n  selector: 'app-password-form',\n  standalone: true,\n  imports: [ToastComponent, FormsModule, ReactiveFormsModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], PasswordComponent);\nexport { PasswordComponent };","map":{"version":3,"names":["Component","FormBuilder","FormsModule","ReactiveFormsModule","Validators","ProfileService","ToastComponent","PasswordComponent","fb","profileService","passwordForm","toastIsOpen","errorMessage","color","constructor","group","currentPassword","required","minLength","maxLength","newPassword","confirmPassword","ngOnInit","fetchCurrent","subscribe","password","patchValue","handlePasswordUpdate","_this","_asyncToGenerator","invalid","value","showToast","passwordUpdate","next","reset","error","message","setTimeout","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\lucas\\OneDrive\\Documents\\Github\\netflixProjectFrontAngular\\src\\app\\components\\profile\\password\\password.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { ProfileService } from '../../../services/profile.service';\r\nimport { ToastComponent } from '../../common/toast/toast.component';\r\n\r\n@Component({\r\n  selector: 'app-password-form',\r\n  standalone: true,\r\n  imports: [ToastComponent, FormsModule, ReactiveFormsModule],\r\n  templateUrl: './password.component.html',\r\n  styleUrl: './password.component.scss'\r\n})\r\nexport class PasswordComponent implements OnInit{\r\n  passwordForm: FormGroup;\r\n  toastIsOpen = false;\r\n  errorMessage = '';\r\n  color = '';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private profileService: ProfileService,\r\n  ) {\r\n    this.passwordForm = this.fb.group({\r\n      currentPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\r\n      newPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\r\n      confirmPassword: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.profileService.fetchCurrent().subscribe(password => {\r\n      this.passwordForm.patchValue({\r\n        currentPassword: password.currentPassword,\r\n        newPassword: password.newPassword\r\n      });\r\n    });\r\n  }\r\n\r\n  async handlePasswordUpdate(): Promise<void> {\r\n    if (this.passwordForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    const { currentPassword, newPassword, confirmPassword } = this.passwordForm.value;\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      this.showToast('Passwords are not equal', 'bg-danger');\r\n      return;\r\n    }\r\n\r\n    if (currentPassword === newPassword) {\r\n      this.showToast('New password and current password are the same', 'bg-danger');\r\n      return;\r\n    }\r\n\r\n    this.profileService.passwordUpdate({ currentPassword, newPassword }).subscribe({\r\n      next: () => {\r\n        this.showToast('Password updated', 'bg-success');\r\n        this.passwordForm.reset();\r\n        return;\r\n      },\r\n      error: () => {        \r\n         this.showToast('Password incorrect', 'bg-danger');\r\n      },\r\n    });\r\n\r\n  }\r\n\r\n  private showToast(message: string, color: string): void {\r\n    this.toastIsOpen = true;\r\n    this.errorMessage = message;\r\n    this.color = color;\r\n    setTimeout(() => this.toastIsOpen = false, 3000);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}