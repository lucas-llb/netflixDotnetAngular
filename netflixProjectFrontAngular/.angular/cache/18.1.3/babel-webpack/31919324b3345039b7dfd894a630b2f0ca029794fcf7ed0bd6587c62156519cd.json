{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/lucas/OneDrive/Documents/Github/netflixProjectFrontAngular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./login.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./login.component.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nlet LoginComponent = class LoginComponent {\n  router;\n  fb;\n  authService;\n  loginForm;\n  toastColor = '';\n  toastIsOpen = false;\n  toastMessage = '';\n  constructor(router, fb, authService) {\n    this.router = router;\n    this.fb = fb;\n    this.authService = authService;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    if (sessionStorage.getItem('netflix-token')) {\n      this.router.navigate(['/home']);\n    }\n    const registerSuccess = this.router.getCurrentNavigation()?.extras.state?.registered;\n    if (registerSuccess === 'true') {\n      this.showToast('bg-success', 'Register successful!');\n    }\n  }\n  handleLogin() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.loginForm.valid) {\n        const {\n          email,\n          password\n        } = _this.loginForm.value;\n        _this.authService.login({\n          email,\n          password\n        }).subscribe({\n          next: () => {\n            _this.router.navigate(['/home']);\n          },\n          error: () => {\n            _this.showToast('bg-danger', 'E-mail or password incorrect!');\n          }\n        });\n      }\n    })();\n  }\n  showToast(color, message) {\n    this.toastColor = color;\n    this.toastMessage = message;\n    this.toastIsOpen = true;\n    setTimeout(() => {\n      this.toastIsOpen = false;\n    }, 3000);\n  }\n  static ctorParameters = () => [{\n    type: Router\n  }, {\n    type: FormBuilder\n  }, {\n    type: AuthService\n  }];\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","Router","FormBuilder","Validators","AuthService","LoginComponent","router","fb","authService","loginForm","toastColor","toastIsOpen","toastMessage","constructor","group","email","required","password","ngOnInit","sessionStorage","getItem","navigate","registerSuccess","getCurrentNavigation","extras","state","registered","showToast","handleLogin","_this","_asyncToGenerator","valid","value","login","subscribe","next","error","color","message","setTimeout","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\lucas\\OneDrive\\Documents\\Github\\netflixProjectFrontAngular\\src\\app\\pages\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  toastColor: string = '';\r\n  toastIsOpen: boolean = false;\r\n  toastMessage: string = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private readonly authService: AuthService\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (sessionStorage.getItem('netflix-token')) {\r\n      this.router.navigate(['/home']);\r\n    }\r\n\r\n    const registerSuccess =\r\n      this.router.getCurrentNavigation()?.extras.state?.registered;\r\n    if (registerSuccess === 'true') {\r\n      this.showToast('bg-success', 'Register successful!');\r\n    }\r\n  }\r\n\r\n  async handleLogin(): Promise<void> {\r\n    if (this.loginForm.valid) {\r\n      const { email, password } = this.loginForm.value;\r\n      this.authService.login({ email, password }).subscribe({\r\n        next: () => {\r\n          this.router.navigate(['/home']);\r\n        },\r\n        error: () => {\r\n          this.showToast('bg-danger', 'E-mail or password incorrect!');\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  showToast(color: string, message: string): void {\r\n    this.toastColor = color;\r\n    this.toastMessage = message;\r\n    this.toastIsOpen = true;\r\n    setTimeout(() => {\r\n      this.toastIsOpen = false;\r\n    }, 3000);\r\n  }\r\n}\r\n"],"mappings":";;;;AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,WAAW,QAAQ,6BAA6B;AAOlD,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAOfC,MAAA;EACAC,EAAA;EACSC,WAAA;EARnBC,SAAS;EACTC,UAAU,GAAW,EAAE;EACvBC,WAAW,GAAY,KAAK;EAC5BC,YAAY,GAAW,EAAE;EAEzBC,YACUP,MAAc,EACdC,EAAe,EACNC,WAAwB;IAFjC,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,EAAE,GAAFA,EAAE;IACO,KAAAC,WAAW,GAAXA,WAAW;IAE5B,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,EAAE,CAACO,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACY,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACa,QAAQ,CAAC;KACrC,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,IAAIC,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC,EAAE;MAC3C,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IACjC;IAEA,MAAMC,eAAe,GACnB,IAAI,CAAChB,MAAM,CAACiB,oBAAoB,EAAE,EAAEC,MAAM,CAACC,KAAK,EAAEC,UAAU;IAC9D,IAAIJ,eAAe,KAAK,MAAM,EAAE;MAC9B,IAAI,CAACK,SAAS,CAAC,YAAY,EAAE,sBAAsB,CAAC;IACtD;EACF;EAEMC,WAAWA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACf,IAAID,KAAI,CAACpB,SAAS,CAACsB,KAAK,EAAE;QACxB,MAAM;UAAEhB,KAAK;UAAEE;QAAQ,CAAE,GAAGY,KAAI,CAACpB,SAAS,CAACuB,KAAK;QAChDH,KAAI,CAACrB,WAAW,CAACyB,KAAK,CAAC;UAAElB,KAAK;UAAEE;QAAQ,CAAE,CAAC,CAACiB,SAAS,CAAC;UACpDC,IAAI,EAAEA,CAAA,KAAK;YACTN,KAAI,CAACvB,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;UACjC,CAAC;UACDe,KAAK,EAAEA,CAAA,KAAK;YACVP,KAAI,CAACF,SAAS,CAAC,WAAW,EAAE,+BAA+B,CAAC;UAC9D;SACD,CAAC;MACJ;IAAC;EACH;EAEAA,SAASA,CAACU,KAAa,EAAEC,OAAe;IACtC,IAAI,CAAC5B,UAAU,GAAG2B,KAAK;IACvB,IAAI,CAACzB,YAAY,GAAG0B,OAAO;IAC3B,IAAI,CAAC3B,WAAW,GAAG,IAAI;IACvB4B,UAAU,CAAC,MAAK;MACd,IAAI,CAAC5B,WAAW,GAAG,KAAK;IAC1B,CAAC,EAAE,IAAI,CAAC;EACV;;;;;;;;;AAlDWN,cAAc,GAAAmC,UAAA,EAL1BxC,SAAS,CAAC;EACTyC,QAAQ,EAAE,WAAW;EACrBC,QAAA,EAAAC,oBAAqC;;CAEtC,CAAC,C,EACWtC,cAAc,CAmD1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}