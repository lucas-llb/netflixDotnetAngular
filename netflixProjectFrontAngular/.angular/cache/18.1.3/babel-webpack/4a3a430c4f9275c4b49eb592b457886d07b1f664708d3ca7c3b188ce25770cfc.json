{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { environment } from '../environment';\nlet SerieService = class SerieService {\n  http;\n  apiUrl = `${environment.BACKEND_API_URL}/series`;\n  constructor(http) {\n    this.http = http;\n  }\n  getNewestSeries() {\n    return this.http.get(`${this.apiUrl}/newest`).pipe(catchError(this.handleError));\n  }\n  getFeaturedSeries() {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/featured`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  addToFavorite(serieId) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.post(`${environment.BACKEND_API_URL}/favorites`, {\n      serieId\n    }, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  removeFavorite(serieId) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.delete(`${environment.BACKEND_API_URL}/favorites/${serieId}`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getFavorites() {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${environment.BACKEND_API_URL}/favorites`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getSearch(name) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/search?name=${name}`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getEpisodes(id) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/${id}`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  addLike(serieId) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.post(`${environment.BACKEND_API_URL}/likes`, {\n      serieId\n    }, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  removeLike(serieId) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.delete(`${environment.BACKEND_API_URL}/likes/${serieId}`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    return throwError(error);\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nSerieService = __decorate([Injectable({\n  providedIn: 'root'\n})], SerieService);\nexport { SerieService };","map":{"version":3,"names":["Injectable","HttpClient","HttpHeaders","catchError","throwError","environment","SerieService","http","apiUrl","BACKEND_API_URL","constructor","getNewestSeries","get","pipe","handleError","getFeaturedSeries","token","sessionStorage","getItem","headers","set","addToFavorite","serieId","post","removeFavorite","delete","getFavorites","getSearch","name","getEpisodes","id","addLike","removeLike","error","__decorate","providedIn"],"sources":["C:\\Users\\lucas\\OneDrive\\Documents\\Github\\netflixProjectFrontAngular\\src\\app\\services\\serie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, Observable, throwError } from 'rxjs';\r\nimport { environment } from '../environment';\r\n\r\nexport interface EpisodeType {\r\n  id: number;\r\n  name: string;\r\n  synopsis: string;\r\n  order: number;\r\n  videoUrl: string;\r\n  secondsLong: number;\r\n}\r\n\r\nexport interface SerieType {\r\n  id: number;\r\n  name: string;\r\n  thumbnailUrl: string;\r\n  synopsis: string;\r\n  episodes?: EpisodeType[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SerieService {\r\n  private apiUrl = `${environment.BACKEND_API_URL}/series`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getNewestSeries(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/newest`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getFeaturedSeries(): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<any>(`${this.apiUrl}/featured`, { headers }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  addToFavorite(serieId: number | string): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.post<any>(`${environment.BACKEND_API_URL}/favorites`, { serieId }, { headers }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  removeFavorite(serieId: number | string): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.delete<any>(`${environment.BACKEND_API_URL}/favorites/${serieId}`, { headers }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getFavorites(): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<any>(`${environment.BACKEND_API_URL}/favorites`, { headers }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getSearch(name: string): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<any>(`${this.apiUrl}/search?name=${name}`, { headers }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getEpisodes(id: string | number): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<any>(`${this.apiUrl}/${id}`, { headers }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  addLike(serieId: number | string): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.post<any>(`${environment.BACKEND_API_URL}/likes`, { serieId }, { headers }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  removeLike(serieId: number | string): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.delete<any>(`${environment.BACKEND_API_URL}/likes/${serieId}`, { headers }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    return throwError(error);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}