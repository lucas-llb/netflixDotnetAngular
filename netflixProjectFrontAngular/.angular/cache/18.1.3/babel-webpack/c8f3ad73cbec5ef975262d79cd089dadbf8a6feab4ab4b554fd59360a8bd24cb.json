{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../environment';\nlet AuthService = class AuthService {\n  http;\n  apiUrl = environment.BACKEND_API_URL;\n  constructor(http) {\n    this.http = http;\n  }\n  register(params) {\n    return this.http.post(`${this.apiUrl}/auth/register`, params).pipe(catchError(this.handleError));\n  }\n  login(params) {\n    return this.http.post(`${this.apiUrl}/auth/login`, params).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 400 || error.status === 401) {\n      return throwError(error.error);\n    }\n    return throwError('An unexpected error occurred.');\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["Injectable","HttpClient","throwError","catchError","environment","AuthService","http","apiUrl","BACKEND_API_URL","constructor","register","params","post","pipe","handleError","login","error","status","__decorate","providedIn"],"sources":["C:\\Users\\lucas\\OneDrive\\Documents\\Github\\netflixProjectFrontAngular\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../environment';\r\n\r\ninterface RegisterParams {\r\n  firstName: string;\r\n  lastName: string;\r\n  phone: string;\r\n  birth: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface LoginParams {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = environment.BACKEND_API_URL;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  register(params: RegisterParams): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/auth/register`, params).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  login(params: LoginParams): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/auth/login`, params).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    if (error.status === 400 || error.status === 401) {\r\n      return throwError(error.error);\r\n    }\r\n    return throwError('An unexpected error occurred.');\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAA2B,sBAAsB;AACpE,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,gBAAgB;AAmBrC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAGFC,IAAA;EAFZC,MAAM,GAAGH,WAAW,CAACI,eAAe;EAE5CC,YAAoBH,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCI,QAAQA,CAACC,MAAsB;IAC7B,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,gBAAgB,EAAEI,MAAM,CAAC,CAACE,IAAI,CAChEV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEAC,KAAKA,CAACJ,MAAmB;IACvB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,aAAa,EAAEI,MAAM,CAAC,CAACE,IAAI,CAC7DV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAWA,CAACE,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,IAAID,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;MAChD,OAAOf,UAAU,CAACc,KAAK,CAACA,KAAK,CAAC;IAChC;IACA,OAAOd,UAAU,CAAC,+BAA+B,CAAC;EACpD;;;;;AAtBWG,WAAW,GAAAa,UAAA,EAHvBlB,UAAU,CAAC;EACVmB,UAAU,EAAE;CACb,CAAC,C,EACWd,WAAW,CAuBvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}