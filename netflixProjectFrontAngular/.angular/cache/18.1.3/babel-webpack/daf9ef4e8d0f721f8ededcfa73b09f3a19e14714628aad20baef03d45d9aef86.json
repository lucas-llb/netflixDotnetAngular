{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../environment';\nlet CategoriesService = class CategoriesService {\n  http;\n  apiUrl = `${environment.BACKEND_API_URL}/categories`;\n  constructor(http) {\n    this.http = http;\n  }\n  getCategories() {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(this.apiUrl, {\n      headers\n    });\n  }\n  getSeries(id) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/${id}`, {\n      headers\n    });\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nCategoriesService = __decorate([Injectable({\n  providedIn: 'root'\n})], CategoriesService);\nexport { CategoriesService };","map":{"version":3,"names":["Injectable","HttpClient","HttpHeaders","environment","CategoriesService","http","apiUrl","BACKEND_API_URL","constructor","getCategories","token","sessionStorage","getItem","headers","set","get","getSeries","id","__decorate","providedIn"],"sources":["C:\\Users\\lucas\\OneDrive\\Documents\\Github\\netflixProjectFrontAngular\\src\\app\\services\\categories.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../environment';\r\nimport { SerieType } from './serie.service';\r\n\r\n\r\nexport interface CategoryType {\r\n  id: number;\r\n  name: string;\r\n  position: number;\r\n  series?: SerieType[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoriesService {\r\n  private apiUrl = `${environment.BACKEND_API_URL}/categories`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCategories(): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<any>(this.apiUrl, { headers });\r\n  }\r\n\r\n  getSeries(id: number): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<any>(`${this.apiUrl}/${id}`, { headers });\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,gBAAgB;AAcrC,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAGRC,IAAA;EAFZC,MAAM,GAAG,GAAGH,WAAW,CAACI,eAAe,aAAa;EAE5DC,YAAoBH,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCI,aAAaA,CAAA;IACX,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC;IACrD,MAAMC,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACL,IAAI,CAACU,GAAG,CAAM,IAAI,CAACT,MAAM,EAAE;MAAEO;IAAO,CAAE,CAAC;EACrD;EAEAG,SAASA,CAACC,EAAU;IAClB,MAAMP,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC;IACrD,MAAMC,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACL,IAAI,CAACU,GAAG,CAAM,GAAG,IAAI,CAACT,MAAM,IAAIW,EAAE,EAAE,EAAE;MAAEJ;IAAO,CAAE,CAAC;EAChE;;;;;AAfWT,iBAAiB,GAAAc,UAAA,EAH7BlB,UAAU,CAAC;EACVmB,UAAU,EAAE;CACb,CAAC,C,EACWf,iBAAiB,CAgB7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}