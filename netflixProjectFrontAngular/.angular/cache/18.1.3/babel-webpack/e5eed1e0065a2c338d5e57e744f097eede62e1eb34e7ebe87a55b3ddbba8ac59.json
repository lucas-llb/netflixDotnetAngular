{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../environment';\nlet EpisodeService = class EpisodeService {\n  http;\n  apiUrl = `${environment.BACKEND_API_URL}/episodes`;\n  constructor(http) {\n    this.http = http;\n  }\n  getWatchTime(episodeId) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/${episodeId}/watchTime`, {\n      headers\n    });\n  }\n  setWatchTime(params) {\n    const token = sessionStorage.getItem('netflix-token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.post(`${this.apiUrl}/${params.episodeId}/watchTime`, {\n      seconds: params.seconds\n    }, {\n      headers\n    });\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nEpisodeService = __decorate([Injectable({\n  providedIn: 'root'\n})], EpisodeService);\nexport { EpisodeService };","map":{"version":3,"names":["Injectable","HttpClient","HttpHeaders","environment","EpisodeService","http","apiUrl","BACKEND_API_URL","constructor","getWatchTime","episodeId","token","sessionStorage","getItem","headers","set","get","setWatchTime","params","post","seconds","__decorate","providedIn"],"sources":["C:\\Users\\lucas\\OneDrive\\Documents\\Github\\netflixProjectFrontAngular\\src\\app\\services\\episodes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../environment';\r\n\r\ninterface WatchTimeParams {\r\n  episodeId: number;\r\n  seconds: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EpisodeService {\r\n  private apiUrl = `${environment.BACKEND_API_URL}/episodes`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getWatchTime(episodeId: number): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.get<any>(`${this.apiUrl}/${episodeId}/watchTime`, { headers });\r\n  }\r\n\r\n  setWatchTime(params: WatchTimeParams): Observable<any> {\r\n    const token = sessionStorage.getItem('netflix-token');\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    return this.http.post<any>(`${this.apiUrl}/${params.episodeId}/watchTime`, { seconds: params.seconds }, { headers });\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,gBAAgB;AAUrC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGLC,IAAA;EAFZC,MAAM,GAAG,GAAGH,WAAW,CAACI,eAAe,WAAW;EAE1DC,YAAoBH,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCI,YAAYA,CAACC,SAAiB;IAC5B,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC;IACrD,MAAMC,OAAO,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACN,IAAI,CAACW,GAAG,CAAM,GAAG,IAAI,CAACV,MAAM,IAAII,SAAS,YAAY,EAAE;MAAEI;IAAO,CAAE,CAAC;EACjF;EAEAG,YAAYA,CAACC,MAAuB;IAClC,MAAMP,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC;IACrD,MAAMC,OAAO,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACN,IAAI,CAACc,IAAI,CAAM,GAAG,IAAI,CAACb,MAAM,IAAIY,MAAM,CAACR,SAAS,YAAY,EAAE;MAAEU,OAAO,EAAEF,MAAM,CAACE;IAAO,CAAE,EAAE;MAAEN;IAAO,CAAE,CAAC;EACtH;;;;;AAfWV,cAAc,GAAAiB,UAAA,EAH1BrB,UAAU,CAAC;EACVsB,UAAU,EAAE;CACb,CAAC,C,EACWlB,cAAc,CAgB1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}